module BigALU(
    a,
    b,
    sign_a,
    sign_b,
    symbol,
    out,
    cout,
    sign_out
);

parameter DATA_WITDH = 24;

input [DATA_WITDH - 1: 0] a;
input [DATA_WITDH - 1: 0] b;
input sign_a, symbol, sign_b;

wire [DATA_WITDH - 1: 0] a;
wire [DATA_WITDH - 1: 0] b;
wire sign_a, symbol, sign_b;

output [DATA_WITDH - 1: 0] out;
output cout;
output sign_out;

reg [DATA_WITDH - 1: 0] out;
reg cout;
reg sign_out;


wire [23: 0] out_plus, out_sub, out_tmp, out_sub_neg;
wire c_plus, c_sub, c_out_neg;
wire tmp;

FA_24 FA_24_tmp(.a(a), .b(b), .cin(0), .s(out_plus), .cout(c_plus));  
FS_24 FS_24_tmp(.a(a), .b(b), .cin(0), .out(out_sub), .cout(c_sub));

not (out_tmp[DATA_WITDH -1: 0], out_sub[DATA_WITDH -1: 0]);
FA_24 FA_24_1(.a(out_tmp), .b(1), .s(out_sub_neg), .cout(c_out_neg));

xor (tmp, c_sub, 1'b1);



always @(sign_a or symbol or sign_b)
begin
  case ({sign_a, symbol, sign_b})
    3'b000  : begin
                assign out = out_plus;
                assign sign_out = 1'b0;
                assign cout = c_plus;
              end
    3'b001  : begin
                assign  out = out_sub;
                assign  sign_out = c_sub;
              end
    3'b010  : begin
                assign  out = out_sub;
                assign  sign_out = c_sub;
              end
    3'b011  : begin
                assign  out = out_plus;
                assign  sign_out = 1'b0;
                assign  cout = c_plus;
              end
    
    3'b100  : begin
                assign out = out_sub;
                if (c_sub) begin assign out = out_sub_neg; end
                assign  sign_out = tmp;
              end
    
    3'b101  : begin
                assign  out = out_plus;
                assign  sign_out = 1'b1;
              end
    3'b110  : begin
                assign  out = out_plus;
                assign  sign_out = 1'b1;
              end
    
    3'b111  : begin
                assign  out = out_sub;
                assign  sign_out = tmp;
              end
    default : #100;
  endcase
end

endmodule